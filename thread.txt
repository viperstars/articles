多进程与多线程，二者的最大区别就是：是否共享资源，后者是共享资源的，而前者是不共享的

多线程最大的问题就是共享数据的修改

线程安全是在多线程的环境下，能够保证多个线程同时执行时程序依旧运行正确，而且要保证对于共享的数据，可以由多个线程存取，但是同一时刻只能有一个线程进行存取

那么如何才能保证同一时刻只有一个线程对共享资源进行存取?

加锁可以保证存取操作的唯一性，从而保证同一时刻只有一个线程对共享数据存取

通常加锁也有 2 种不同的粒度的锁：

fine-grained ( 所谓的细粒度 )，那么程序员需要自行加锁和解锁来保证线程安全

coarse-grained ( 所谓的粗粒度 ), 那么语言 interpreter 层面本身维护着一个全局的锁机制，用来保证线程安全

Python 的 GIL 是指，对于一个 interpreter 进程，只能有一个线程在执行 bytecode，GIL 保证了每个 bytecode 这层面上是线程安全的

如果某个操作需要多个 bytecode 操作，在执行这个操作的多条 bytecode 期间切换到其他线程，那么这个操作是否能够完全执行就是不确定的，所以这个操作不是线程安全的

def f():
    global num
    num += 1

dis.dis(f)
    0 LOAD_GLOBAL              0 (num)
    3 LOAD_CONST               1 (1)
    6 INPLACE_ADD
    7 STORE_GLOBAL             0 (num)
  10 LOAD_CONST                0 (None)
  13 RETURN_VALUE

Python 默认是每个线程执行100条字节码切换至其他线程

https://github.com/Cito/w4py/blob/master/MiscUtils/DBPool.py

DBPool.py 的处理方式

dbapi 就是使用的 DB-API 2 模块，例如 MySQLdb，pymysql

1，先获取 dbapi.threadsafety 如果 threadsafety == 0， 则直接抛出异常说明不支持此 dbapi

2，如果 dbapi.threadsafety == 1，则认为此 dbapi 的连接不是线程安全的，然后 from Queue import Queue，利用 Queue 来保证所有操作都是有序且原子的执行

3，如果 dbapi.threadsafety in (2, 3)，则认为 dbapi 的连接是线程安全的，那么在获取连接时只需要通过加锁和解锁来保证操作的执行


threading 模块中的两个锁

import threading

lock = threading.Lock() #Lock对象
lock.acquire()
lock.acquire()  #死锁
lock.release()
lock.release()

import threading

rLock = threading.RLock()
rLock.acquire()
rLock.acquire() #同一线程内，程序不会阻塞
rLock.release()
rLock.release()

RLock 内部维护着一个 Lock 和一个 counter 变量，counter 记录了 acquire 的次数，从而使得资源可以被多次 require
直到一个线程所有的 acquire 都被 release，其他的线程才能获得资源
